/*
 * File: app/view/JobForm.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Senkins.view.JobForm', {
    extend: 'Ext.form.Panel',
    alias: 'widget.jobform',

    requires: [
        'Senkins.view.JobFormViewModel',
        'Ext.button.Button',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.Spacer',
        'Ext.form.FieldSet',
        'Ext.form.field.TextArea',
        'Ext.form.field.Checkbox'
    ],

    viewModel: {
        type: 'jobform'
    },
    height: 556,
    itemId: 'jobPanel',
    width: 629,
    bodyPadding: 10,
    title: 'Editing Job [INSRT JOB HERE]',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'container',
            margin: '10 0 10 0',
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'container',
                    flex: 1
                },
                {
                    xtype: 'button',
                    itemId: 'executeJobBtn',
                    scale: 'large',
                    text: 'Execute Job Now'
                },
                {
                    xtype: 'container',
                    flex: 1
                }
            ]
        },
        {
            xtype: 'fieldset',
            layout: 'form',
            title: 'Description',
            items: [
                {
                    xtype: 'textfield',
                    fieldLabel: 'Name',
                    name: 'name'
                },
                {
                    xtype: 'textareafield',
                    fieldLabel: 'Description',
                    name: 'description'
                },
                {
                    xtype: 'textareafield',
                    fieldLabel: 'Exec',
                    name: 'exec'
                }
            ]
        },
        {
            xtype: 'fieldset',
            layout: 'form',
            title: 'Cron',
            items: [
                {
                    xtype: 'checkboxfield',
                    fieldLabel: 'Scheduled Job',
                    name: 'useCron',
                    boxLabel: ''
                },
                {
                    xtype: 'textfield',
                    fieldLabel: 'Cron Schedule',
                    name: 'cron'
                }
            ]
        },
        {
            xtype: 'fieldset',
            layout: 'form',
            title: 'Email',
            items: [
                {
                    xtype: 'checkboxfield',
                    fieldLabel: 'Use Default',
                    name: 'useDefaultEmail',
                    boxLabel: '',
                    checked: true
                },
                {
                    xtype: 'textfield',
                    fieldLabel: 'Email',
                    name: 'email'
                }
            ]
        }
    ],
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            items: [
                {
                    xtype: 'button',
                    text: '<i class="fa fa-floppy-o"></i> Save',
                    listeners: {
                        click: 'onButtonClick4'
                    }
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    itemId: 'deleteBtn',
                    text: '<i class="fa fa-trash"></i> Delete'
                }
            ]
        }
    ],

    onButtonClick4: function(button, e, eOpts) {
        if(this.state == 'new'){
            this.addNewJob();
        }else if (this.state == 'edit'){
            this.editJob();
        }
    },

    changeState: function(newState) {
        var jobPanel = this.queryById("jobPanel");
        var settingsPanel = this.queryById("settingsPanel");
        var executeJobBtn = this.queryById("executeJobBtn");
        var deleteBtn = this.queryById("deleteBtn");

        switch(newState){
            case 'init':
                jobPanel.hide();
                jobPanel.reset();

                settingsPanel.hide();
                break;
            case 'new':
                jobPanel.setTitle("Create New Job");
                jobPanel.show();

                executeJobBtn.hide();
                deleteBtn.hide();
                break;
            case 'settings':
                settingsPanel.show();
                jobPanel.hide();
                jobPanel.reset();
                break;
        }

        this.state = newState;
    },

    loadJob: function(jobName) {
        this.mask('Loading Job...');

        AERP.Ajax.request({
            url:'getJob',
            params:{job:jobName},
            success:function(reply){
                this.unmask();
                console.log(reply);
            },
            failure:function(){
                this.unmask();
            },
            scope:this
        });
    },

    addNewJob: function() {
        var jobPanel = this.queryById("jobPanel");

        this.mask("Adding New Job...");

        AERP.Ajax.request({
            url:'addNewJob',
            params:jobPanel.getValues(false,false,true,true), //[asString], [dirtyOnly], [includeEmptyText], [useDataValues]
            success:function(result){
                this.unmask();
                console.log(result);
            },
            failure:function(){
                this.unmask();
            },
            scope:this
        });
    }

});